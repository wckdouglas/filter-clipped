name: CI

on:
  push:
    branches: 
      - 'main'
  pull_request:
    branches: 
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-and-test-rust:
    name: Rust CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: CI -- test
        run: |
          cargo clippy

      - name: CI -- test
        run: |
          cargo test
      
      - name: CI -- format
        run: |
          cargo fmt
  
      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@main
        with:
          prefix: '' # 
      
      - name: Show version
        run: |
          echo Will release to ${{ steps.get_next_version.outputs.version }}
  


  build-and-push-image:
    needs: build-and-test-rust
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      pull-requests: write
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@main
        with:
          prefix: '' # optional, defaults to ''

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_next_version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.get_next_version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run release
        run: |
          CARGO_PKG_VERSION=${{ steps.get_next_version.outputs.version }} 
          sed 's/version = "0.0.0"/version = \"'"$CARGO_PKG_VERSION"'\"/' -i Cargo.toml
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
  
      - name: push tag
        run: |
          gh release create ${{ steps.get_next_version.outputs.version }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}